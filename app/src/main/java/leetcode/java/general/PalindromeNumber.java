/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package leetcode.java.general;


import java.util.Arrays;
import java.util.HashMap;

/*
https://leetcode.com/problems/palindrome-number/description/


 */
public class PalindromeNumber {


    //approach 1: reversing half the number
    public static boolean isPalindrome2(int x) {
        if(x < 0) {
            return false;
        } else {
            String equivalent = String.valueOf(x);
            int loopLenght = (equivalent.length() / 2) + (equivalent.length() % 2);
            int outerLoop = equivalent.length() - 1;
            for(int i = 0; i < loopLenght; i++ ) {
                if(equivalent.charAt(i) != equivalent.charAt(outerLoop)){
                    return false;
                } else {
                    outerLoop--;
                }
            }
            return true;
        }
    }


    //approach 2: using the modular operator
    public static boolean isPalindrome(int x) {
        if(x < 0) {
            return false;
        } else {
            int lastDigit;
            int reversedNumber = x;
            int createdPalindrome = 0;
            int multiplier = 1;
            while(reversedNumber > 0) {
                lastDigit = reversedNumber % 10;
                createdPalindrome += (multiplier * lastDigit);
                reversedNumber /= 10;
                multiplier *= 10;

            }
            System.out.println(createdPalindrome);
            return (x == createdPalindrome);
        }
    }


    public static void main(String[] args) {
        boolean isBoolean = isPalindrome(10);
        System.out.println("Is it palindrome? " + isBoolean);

    }
}
